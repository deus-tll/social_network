openapi: 3.0.0
info:
  title: 'Social Network'
  description: '## An attempt to implement a social network with basic functionality using "Laravel 10" for backend and "React Framework" for frontend.'
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
    description: 'Local API server'
paths:
  /api/auth/register:
    post:
      tags:
        - auth
      summary: 'Register a user'
      operationId: api.auth.register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 'Registration was successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLoginResource'
        '400':
          description: 'Password confirmation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResource'
components:
  schemas:
    ValidationError:
      properties:
        message:
          type: string
          example: 'The given data was invalid.'
        errors:
          properties:
            'key 1':
              type: array
              items:
                type: string
                example: 'Error message 1'
            'key 2':
              type: array
              items:
                type: string
                example: 'Error message 2'
          type: object
      type: object
    RegisterRequest:
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
        password_confirmation:
          type: string
          example: '123456'
      type: object
    BadRequestResource:
      properties:
        status:
          type: string
          example: 'false'
        message:
          type: string
          example: 'Invalid data'
      type: object
    FailedAuthorizationResource:
      properties:
        status:
          type: string
          example: 'false'
        message:
          type: string
          example: Unauthorized
      type: object
    SuccessLoginResource:
      properties:
        status:
          type: string
          example: 'true'
        message:
          type: string
          example: 'Registration was successful | User logged in successfully'
        user:
          $ref: '#/components/schemas/User'
        authorization:
          $ref: '#/components/schemas/TokenResource'
      type: object
    TokenResource:
      properties:
        access_token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3JlZ2lzdGVyIiwiaWF0IjoxNzA2NTUyMTM4LCJleHAiOjE3MDY5MTIxMzgsIm5iZiI6MTcwNjU1MjEzOCwianRpIjoiRk9hclkyZ2VvckhPT1llbSIsInN1YiI6IjQiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3IiwiZW1haWwiOiJ2YXN5YTJAdmFzeWEuY29tIiwibmFtZSI6InZhc3lhMiJ9.APeVTaT7gnkVVboKkfXDndq1vjQFiiaMPCw21aS9hL8
        type:
          type: string
          example: bearer
      type: object
    User:
      properties:
        id:
          type: integer
          example: '2'
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
      type: object
  securitySchemes:
    BearerToken:
      type: http
      bearerFormat: JWT
      scheme: bearer
